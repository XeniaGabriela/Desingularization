 . .5 lipmanresolve
...................

Procedure from library `lipmanresolve.lib' (*note lipmanresolve_lib::).

*Usage:*
     lipmanresolve(i);
     
*Assume:*
     i = 2-dimensional radical ideal over the integers or a field

*Note_*
     i ideal in the ring r

*Compute:*
     a strong desingularization of r/i using lipmans desigularization
     algorithm which is based on alternating normalizations and blow ups
      
 *Return:*
     a list, say lr, of size 2 with

     - lr[1] a sublist of n regular rings where lr[1][j]/lip is the scheme 
       corresponding to the i-th chart of the desingularization of i
       each lr[1][j] contains the ideals
       - lip
       - liph, the map from r/i to this chart

     -  lr[2] is a sublist of all m rings from the initial ring r=lr[2][1] with 
        the intermediate rings lr[2][k] for k=2,...,m-n, containig two ideals
        - i
        - liph
        where lr[2][k]/i is an intermediate scheme and liph is describing the 
        map from the initial ring to this chart and the end rings  lr[2][l] for 
        l=m-n+1,...,m, same rings as in lr[1]
     
     In every chart there is a matrix Path with 3 rows and n columns 
     where n-1 is the number of  steps from the initial ring r/i to this 
     chart lr[1][j]/lip. The first column is the vector  
     - [0,0,1] = [initial ring, initial vertex,first branch] 
       and the following colums are of the form 
     - [“1“ for a normalization, vertex, branch of vertex above] or 
     - [“-1“ for a blow up , vertex, branch of vertex above]
       
     
*Example:*
     LIB "lipmanresolve.lib";
     ring R=0,(x,y,z),dp;
     ideal i=x2+y3z3+y2z5;
     list lr=lipmanresolve(i);
     lr;
     ==> [1]:
     ==>    [1]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 2
     ==> //        block   1 : ordering dp
     ==> //                  : names    y(2) y(3)
     ==> //        block   2 : ordering C
     ==>    [2]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(2) y(1) y(3)
     ==> //        block   2 : ordering C
     ==>    [3]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(3) y(1) y(2)
     ==> //        block   2 : ordering C
     ==> [2]:
     ==>    [1]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    x y z
     ==> //        block   2 : ordering C
     ==>    [2]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    T(1) T(2) T(3)
     ==> //        block   2 : ordering C
     ==>    [3]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 2
     ==> //        block   1 : ordering dp
     ==> //                  : names    y(2) y(3)
     ==> //        block   2 : ordering C
     ==>    [4]:
     ==>      //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(2) y(1) y(3)
     ==> //        block   2 : ordering C
     ==>    [5]:
     ==>       //   characteristic : 0
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(3) y(1) y(2)
     ==> //        block   2 : ordering C
//---lr[1] shows 3 final charts
     def R13=lr[1][3];
     setring R13;
     lip;
     ==> lip[1]=x(3)*y(1)^2+y(1)*y(2)+1
//---R13/lip is the third chart of the desingularization of i 
     liph;
     ==> liph[1]=-x(3)^5*y(1)^2*y(2)-2*x(3)^4*y(1)*y(2)^2-x(3)^3*y(2)^3
     ==> liph[2]=-x(3)^2*y(1)*y(2)-x(3)*y(2)^2
     ==> liph[3]=x(3)
//---ideal describing the pictures of the variables from the basering
     print(Path);
     ==> 0,1,-1,
     ==> 0,1,4, 
     ==> 1,1,3 
//---path to this chart: 
//---from [0,0,1] ([initial ring, initial vertex,first branch])
//---over [1,1,1] ([normalization, vertex, branch of vertex above])
//---to [-1,4,3] ([blow up, vertex, branch of vertex above])
//--- as the last step was a blow up there is exceptional divisor in this chart:
     eD;
     ==> eD[1]=x(3)
     ==> eD[2]=y(1)*y(2)+1
     def R22=lr[2][2];
     setring R22;
//--- now we look at the first step of the desingularization, the normalization
     i;
     ==> i[1]=T(3)^3+T(1)^2+T(2)*T(3)
//--- the ideal is called “i“ if we are in an intermediate ring
     liph;
     ==> liph[1]=-T(1)*T(2)*T(3)
     ==> liph[2]=T(2)
     ==> liph[3]=T(3)
     print(Path);
     ==> 0,1,
     ==> 0,1,
     ==> 1,1 
//--- Now an arithmetic surface:
     ring r=integer,(x,y),dp;
     ideal i=x3+y3;
     slocusZ(i);
     ==> [1]:
     ==>    _[1]=y
     ==>    _[2]=x
     ==> [2]:
     ==>    [1]:
     ==>       _[1]=y
     ==>       _[2]=x
     list lrZ=lipmanresolve(i);
     lrZ;
     ==> [1]:
//--- list of end rings
     ==>    [1]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    T(1)
     ==> //        block   2 : ordering dp
     ==> //                  : names    x(2) y(2)
     ==> //        block   3 : ordering C
     ==>    [2]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    T(1)
     ==> //        block   2 : ordering dp
     ==> //                  : names    x(1) y(1) 
     ==> //        block   3 : ordering C
     ==> [2]:
//--- list of all rings
     ==>    [1]:
//--- the initial ring
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 2
     ==> //        block   1 : ordering dp
     ==> //                  : names    x y
     ==> //        block   2 : ordering C
     ==>    [2]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 2
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(2) y(2)
     ==> //        block   2 : ordering C
     ==>    [3]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 2
     ==> //        block   1 : ordering dp
     ==> //                  : names    x(1) y(1)
     ==> //        block   2 : ordering C
     ==>    [4]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    T(1)
     ==> //        block   2 : ordering dp
     ==> //                  : names    x(2) y(2)
     ==> //        block   3 : ordering C
     ==>    [5]:
     ==>       //   coeff. ring is : Integers
     ==> //   number of vars : 3
     ==> //        block   1 : ordering dp
     ==> //                  : names    T(1)
     ==> //        block   2 : ordering dp
     ==> //                  : names    x(1) y(1) 
     ==> //        block   3 : ordering C
//-- we look at the first chart of the desingularized surface:
     def r11=lrZ[1][1];
     setring r11;
     lip;
     ==> lip[1]=T(1)*y(2)+T(1)
     ==> lip[2]=3*T(1)-y(2)^2+y(2)-1
     ==> lip[3]=T(1)^2-T(1)
     ==> lip[4]=y(2)^3+1
     slocusZ[1](lip);
     ==> _[1]=1
     isnor(lip);
     ==> 1
     liph;
     ==> liph[1]=x(2)*y(2)
     ==> liph[2]=x(2)
     print(Path);
     ==> 0,-1,1,
     ==> 0,1, 3,
     ==> 1,1, 1 
//---path to this chart: 
//---from [0,0,1] ([initial ring, initial vertex,first branch])
//---over [-1,1,1] ([blow up, vertex, branch of vertex above])
//---to [1,3,1] ([normalization, vertex, branch of vertex above])
     def r23=lrZ[2][3];
//--- we look at an intermediate ring now
     setring r23;
     print(Path);
     ==> 0,-1,
     ==> 0,2, 
     ==> 1,2  
//--- this is a blow up chart
     i;
     ==> i[1]=y(1)^3+1
     isnor(i);
     ==> 0
     eD;
     ==> eD[1]=x(1)
     ==> eD[2]=y(1)^3+1
     liph;
     ==> liph[1]=x(1)
     ==> liph[2]=x(1)*y(1)
     
     
* Menu:

See also:
* slocusZ::
* blowUp::
* blowUp2::
* blowUp2int::

