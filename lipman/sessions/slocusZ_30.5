                     SINGULAR                                 /
 A Computer Algebra System for Polynomial Computations       /   version 3-1-2
                                                           0<
 by: W. Decker, G.-M. Greuel, G. Pfister, H. Schoenemann     \   Oct 2010
FB Mathematik der Universitaet, D-67653 Kaiserslautern        \
> LIB "all.lib";
LIB "primdecint.lib";

proc mydimension(ideal i) 
{
  i = std(i);
  def BAS = basering;
  ideal r = 1;

  if(size(i) == 0)
  {        
     return(nvars(BAS)+1);
  }
        
  if (reduce(r,i) == 0)
  {       
     return(-1);
  }
           
  if (charstr(BAS)=="integer")
  {
     if (deg(i[1]) == 0)
     {
	ideal i_ = i[2..size(i)];
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }
	
     if (deg(i[size(i)]) == 0)
     {
	ideal i_ = i[1..size(i)-1] ;
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }

     ring r = 0,x(1..nvars(BAS)),dp;
     ideal ii =fetch(BAS,i);
     ii = std(ii);
     return(dim(ii)+1);
  }
  else
  {
     return(dim(i));
  }
}

proc myheight(i) 
{
  i=std(i);
  if(charstr(basering)=="integer")
  {
     return(nvars(basering)+1-mydimension(i));
  }
  else
  {
     return(nvars(basering)-dim(i));
  }
}

proc myintersect(ideal i, ideal j)  
{
  i=std(i);
  j=std(j);

  def BAS = basering;

  if (charstr(BAS)=="integer")
  {
     string tempstr="ring r2=integer,("+varstr(BAS)+",t),dp;";
  }
  else
  {
     string tempstr="ring r2="+charstr(BAS)+",("+varstr(BAS)+",t),dp;";
  }
	
  execute(tempstr); 
  ideal J = 0;
  int k;
  ideal ii=fetch(BAS,i);
  for(k=1; k <= size(ii); k++)
  {
     J=J,t*ii[k];
  }
  ideal jj=fetch(BAS,j);
  for(k=1; k <= size(jj); k++)
  {
     J=J,(1-t)*jj[k];
  }
  ideal e=eliminate(J,t);
  setring BAS;
  ideal result = fetch(r2,e);
  for(k=1; k <= size(result); k++)
  {
     if(leadcoef(result[k]) < 0)
     {
        result[k] = -result[k];
     }
  }
  return(result);
}


proc myquotient(i,j1,j2) 
{
  def BAS = basering;
  int j;
  ideal q = 1;
             
  for(j=1; j <= size(j2); j++)
  {
     ideal s = j2[j],-j1,-i;
     matrix m = matrix(syz(s));
     m = m[1,1..ncols(m)];
     matrix n[1][ncols(m)] = m[1,1..ncols(m)];
     ideal qq = n;
     q = myintersect(q,qq);
     kill m,n,qq,s;
  }
  return(std(q));
}

proc getSmallestZ(ideal J)
{
//--- Computes the polynomial of smallest degree of J.
  int i;
  poly lp,li;
  poly p = J[1];
  int d = deg(p);
  int di;
  for(i = 2; i <= ncols(J); i++)
  {
    if(J[i] != 0)
    {
      di = deg(J[i]);

      lp = leadcoef(p);
      if(lp < 0)
      { lp = -1*lp;}

      li = leadcoef(J[i]);
      if(li < 0)
      { lp = -1*li;}
      
      if((di < d) || (di == d && li < lp))
      {
        p = J[i];
        d = di;
      }
      else
      {
        if(di == d)
        {
          if(size(J[i]) < size(p))
          {
            p = J[i];
          }
        }
      }
    }
  }
  return(p);
}

proc homjj(i,j) 
{
  def BAS = basering;
  ideal endphi;
  if (defined(normap))
  { endphi = normap;}
  else
  { endphi = maxideal(1);}
  poly a = getSmallestZ(j);
  ideal aJJ = myquotient(i,a*j,j),i;          
  aJJ = std(aJJ);                           
  ideal aa = a;
  aa=std(aa);
  ideal rf = interred(reduce(aJJ,aa));
  ideal ci = interred(reduce(rf,std(i)));
//--- ideal ci to check inclusions, Grauert-Remmert-Criterion

  if (size(ci)==0) 
  {                                         //--- a*j:j = ideal(a) modulo i                  
     ideal homj = i;
     export(homj);
     export(endphi);
     list result = BAS,"homj","endphi",0;
     return(result);
  } 
  else 
  {
     ideal f = a,rf;
     int n = size(f);

     ring newR1 = integer,(X(1..nvars(BAS)),T(1..n)),dp;
     
     ideal f = fetch(BAS,f);
     ideal i = fetch(BAS,i);
     ideal Q = i;
     poly a = fetch(BAS,a);
     ideal af = a*f,i;

     matrix T = matrix(ideal(T(1..n)),1,n);
     int ii,jj,kk;
     matrix A;
     for(ii=2;ii<=n;ii++) 
     {
	for(jj=2;jj<=ii;jj++) 
        {
	   A=lift(af,f[ii]*f[jj]);
//--- lift function is only working up to sign!
	   poly q = 0;
	   for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   }
				
	   if (q == f[ii]*f[jj])
	   {
	      matrix AA[n][1] = A[1..n,1];
	   }
	   else
	   { 
	      matrix AA[n][1]  = -A[1..n,1];
	   }
                               
	   Q = Q,ideal(T(ii)*T(jj) - T*AA);
           kill AA;
           kill q;
	}
     }

     ideal fi = f,i;
     matrix syzfi = matrix(syz(fi));
     matrix syzfii[n][n] = syzfi[1..n,1..n];

     Q = Q,ideal(T*syzfii);
     Q = subst(Q,T(1),1);
                
     ring newR2 = integer,(X(1..nvars(BAS)),T(2..n)),dp;

     ideal homj = imap(newR1,Q);
     ideal i = fetch(BAS,i);
     homj = interred(reduce(homj,std(i)));
     ideal endphi = fetch(BAS,endphi);
     export(homj);
     export(endphi);
     list result = newR2,"homj","endphi",1;
     return(result);
  }
}

proc testideal(ideal i) 
{
  i = std(i);
  if(size(i) == 0)
  {
     ideal result = 1;
     return(result);
  }
  ideal j = minor(jacob(i),myheight(i));
  ideal tmp = i,j;
  ideal result = -radicalZ(tmp);
  return(result);
}

proc elimvar(ideal i)
{
  def BAS=basering;

  if (defined(phi))
  {ideal endphi = phi; kill phi;}
  else
  {ideal endphi = maxideal(1);}

  ideal vv,rk;
  poly tt,t,v,rest;
  string ns;
  int n,j,k,pos,b;
  n = size(i);
  
  for(j=1;j<=n;j++)
  {                
// --- Schauen, ob lineare Monome in i[j] existieren
     tt = jet(i[j],1)-jet(i[j],0);
   // --- Monome gefunden
     pos = 0;
     for(k=1;k<=size(tt);k++)
     {
	if ((leadcoef(tt[k]) == 1 || leadcoef(tt[k]) == -1) && (pos == 0))
	{
	   pos = k;
	}
     }

     if (pos > 0)
     { 
	t = tt[pos];
	if (deg(t) > 0 && (leadcoef(t) == 1 || leadcoef(t) == -1))
	{

	   v = leadcoef(t)*t;
           vv = v;
           attrib(vv,"isSB",1);
	   b = 0;
	   rest = i[j]-t;


	   for(k=1;k<=size(rest);k++)
	   {

              rk = rest[k];
              attrib(rk,"isSB",1);
	      if (reduce(rk,vv) == 0)
	      {
		 b = 1;
	      }
	   }
           
	   if (b == 0)
	   {
	      if (leadcoef(t) == 1)
	      {
		 poly replace = -(i[j]-t);
	      }
	      else
	      {
		 poly replace = i[j]-t;       
	      }
              ideal QQ = subst(i,v,replace);
              QQ = simplify(QQ,2);
              ideal phi = subst(endphi,t,replace);
              string s = varstr(BAS);
	      string strv = string(v);
	      int p = find(s,strv);               

	      if (p > 1 && p < size(s))
	      {
		 ns=string(s[1..p-1])+string(s[p+1+size(strv)..size(s)]);
	      }
              if (p == 1)
	      {
		 ns=string(s[2+size(strv)..size(s)]);
	      }
	      if (p+size(strv)-1 == size(s))
	      {
		 ns=string(s[1..size(s)-size(strv)-1]);
	      }
				
	      string tmpstr="ring newR1 = integer,("+ns+"),dp;";
              execute(tmpstr);

              ideal i = imap(BAS,QQ);
              ideal phi = imap(BAS,phi);
              export(phi);
	      list result = elimvar(i);
	      result[4] = 1;				
	      setring BAS;
	      return (result);
	   }
	}
     }
  }
  ideal eli=i;
  export(eli);
  if (defined(endphi))
  { ideal ephi = endphi;}
  else
  { ideal ephi = maxideal(1);}
  export(ephi);
  list result = BAS,"eli","ephi",0;
  return(result);
}

proc isprimZ(ideal i)
{
  list p =  minAssZ(i);
  int j;
  if(size(p) == 1)
  { j=1;}
  return(j);
}

proc mynormal(ideal i) 
{
  def BAS = basering;

  if (isprimZ(i) == 0)
  { 
     "WARNING! The input is not prime!";
     "We will continue with the procedure normalZ(i)";
     list result = normalZ(i);
     return(result);
  }

  ideal j = testideal(i);                                        
  list h = homjj(i,j);

  if (h[4] == 0)
  {
     def NewR = h[1];
     setring NewR;
     ideal norid = homj;
     if(defined(normap) == 0)
     {ideal normap  = endphi;}
     export(norid);
     export(normap);
     list result = BAS,"norid","normap";
     setring BAS;
     return(result);
  }
  else
  {
     def NewR = h[1];
     setring NewR;
     list e = elimvar(homj);
     if (e[4] == 0)
     {
        ideal i = homj;
        ideal normap = endphi;
        export(normap);
        list result = mynormal(i);
        setring BAS;
        return(result);
     }
     else
     {
        def NewR1 = e[1];
        setring NewR1;
        ideal i = std(eli);
        ideal normap = ephi;
        export(normap); 
        list result = mynormal(i);
	setring BAS;
        return(result);
     }
  }
}

proc normalZ(ideal i)
{                                                                          // AM 8.9.GEÃ„NDERT!
  def BAS = basering;
  ideal irad = radicalZ(i);

  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i=irad;
  }

  int isGlobal = ord_test(BAS);

  if (isGlobal != 1)
  {
 //--- We change to dp ordering.
    list rl = ringlist(BAS);
    list origOrd = rl[3];
    list newOrd = list("dp", intvec(1:nvars(BAS))), list("C", 0);
    rl[3] = newOrd;
    def globR = ring(rl);
    setring globR;
    ideal i = fetch(BAS,i);
    list L = minAssZ(i);
    setring BAS;
    L = fetch(globR,L);
  }
  else
  {
    list L = minAssZ(i);
  }
 
  int k = size(L);
  int j;
  list NL;
  for(j=1;j<=k;j++)
  { 
     ideal api = L[j];
     if (deg(api[1]) == 0)
     {
        "field";
        int p = int(api[1]);
        ring rnew = p,x(1..nvars(BAS)),dp; 
        ideal api = fetch(BAS,api);
        list n = normalP(api,"withRing");
        def r1 = n[1][1];
        setring r1;
        NL[j] = r1,"norid","normap";
        setring BAS;
        kill p,rnew,api,r1;
     }
     else  
     {     
        NL[j] = mynormal(api);
        kill api;
     }
  }
  return(NL);
}

proc isnor(ideal i)
{       
  def BAS = basering;  
  int isn;                                              

  if (mydimension(i) == -1)
  {
     isn = 1; 
     return(isn);
  }

  ideal j = testideal(i);
  poly a = getSmallestZ(j);

  if (charstr(BAS) == "integer")
  {
     ideal aJJ = myquotient(i,a*j,j);
  }

  qring q = std(i);
  setring q;
  ideal j = fetch(BAS,j);
  poly a = fetch(BAS,a);
  
  if (charstr(BAS) == "integer")
  {  ideal aJJ = fetch(BAS,aJJ);}
  else
  { ideal aJJ = quotient(a*j,j);}
           
  attrib(aJJ,"isSB",1);
  ideal aa = a;
  aa = std(aa);
  ideal rf = interred(reduce(aJJ,aa));
  if (size(rf) == 0)
  {
    isn = 1;
  }

  return(isn);
  setring BAS;
}

proc slocusZ(ideal i)
{
  i = std(i);
  list Sing,mAi,mAj;
  int ii,mm,nn,mai,maj,pp,sg;
  ideal S,SS,P,J,M,QM,F,SL,I;
  mAi = minAssZ(i);
  mai = size(mAi);
  for (ii=1;ii<=mai;ii++)
  {
     P = mAi[ii];
     pp = size(P);
     J = testideal(P);
     S = 1;
     mAj = minAssZ(J);
     maj = size(mAj);
     for (mm=1;mm<=maj;mm++)
     {
        M = mAj[mm];
        QM = std(M^2);
        for (nn=1;nn<=pp;nn++)
        {
           F = std(P[nn]);
           SL = interred(reduce(F,QM));
           if (size(SL) == 0)
           {S = myintersect(S,M);}
        }
     }
     S = std(S);
     Sing[size(Sing)+1] = S;
  }   
  sg = size(Sing);
  SS = 1;
  for (ii=1;ii<=sg;ii++)
  {
     I = Sing[ii];
     SS = myintersect(SS,I);
  }
  SS = std(SS);
  return(SS);
}

proc singid(ideal i)
{
  def BAS = basering;
  ideal result;
  if (i[1] == 0)
  { result = ideal(1);}
  else
  {
     if (charstr(BAS)=="integer")
     { result = slocusZ(i);}
     else
     { result = slocus(i);}
  }
  return(result);
}

proc Radical(ideal i)
{ 
  def BAS = basering;
  ideal result;
  if(charstr(BAS) == "integer")
  { result = radicalZ(i);}
  else
  { result = radical(i);}
  return(result);
}
    

proc mytransversalT(ideal J, list E,list #)
{
//----------------------------------------------------------------------------
// check whether J and each element of the list E meet transversally
//----------------------------------------------------------------------------
   def R=basering;
   if(size(#) > 0)
   {
     ideal pp = #[1];
   }
   int i,d;
   ideal T,M;
   ideal Jstd = std(J);
   ideal Tstd;
   if (charstr(R) == "integer")
   { d =  myheight(i)+1;}
   else
   { d = nvars(basering)-mydimension(Jstd)+1;}   
//--- d = n-dim(V(J) \cap hypersurface)

   for(i=1;i<=size(E);i++)
   {
      if(size(reduce(E[i],Jstd)) == 0)
      { return(0);}
   //--- V(J) is contained in E[i]
      T = J,E[i];
      Tstd = std(T);
      if (charstr(R) == "integer")
      { d = myheight(Tstd);}
      else
      { d = nvars(basering)-dim(Tstd);}

      if(size(interred(reduce(1,Tstd))) != 0)
      {
//--- intersection is non-empty
         M = minor(jacob(T),d,Tstd)+T;
         M = std(M);
         poly e = 1;
         if(size(interred(reduce(e,M))) > 0)
         {
//--- intersection is not transversal
           if(size(#) == 0)
           {
              return(0);
           }
           M = std(Radical(M));
           if(size(reduce(pp,M)) > 0)
           {return(0);}
         }
      }
   }
//--- passed all tests
   return(1);
}

proc substpart(ideal endid, ideal endphi, int homo, intvec rw)
{
   def newRing = basering;
   int ii,jj;
   map phi = newRing,maxideal(1);    
   list Le = elimpart(endid);
   int q = size(Le[2]);    
   intvec rw1 = 0;        
   rw1[nvars(basering)] = 0;
   rw1 = rw1+1;            //rw1=1,..,1 (as many 1 as nvars(basering))

   while( size(Le[2]) != 0 )
   {
      endid = Le[1];
      if ( defined(ps) )
      { kill ps; }
      map ps = newRing,Le[5];
      phi = ps(phi);
      for(ii=1;ii<=size(Le[2]);ii++)
      {
         phi=phi(phi);
      }
      //eingefuegt wegen x2-y2z2+z3

      for( ii=1; ii<=size(rw1); ii++ )
      {
         if( Le[4][ii]==0 )        //ii = index of var which was substituted
         {
            rw1[ii]=0;             //substituted vars have entry 0 in rw1
         }
      }
      Le=elimpart(endid);          //repeated application of elimpart
      q = q + size(Le[2]);
   }
   endphi = phi(endphi);
   if( nvars(newRing) == q )
   {
     ring lastRing = char(basering),T(1),dp;
     ideal endid = T(1);
     ideal endphi = T(1);
     for(ii=2; ii<=q; ii++ )
     {
        endphi[ii] = 0;
     }
     export(endid,endphi);
     list L = lastRing;
     setring newRing;
     return(L);
   }

   if (homo==1 && nvars(newRing)-q >1 && size(endid) >0 )
   {
      jj=1;
      for( ii=2; ii<size(rw1); ii++)
      {
         jj++;
         if( rw1[ii]==0 )
         {
            rw=rw[1..jj-1],rw[jj+1..size(rw)];
            jj=jj-1;
         }
      }
      if( rw1[1]==0 ) { rw=rw[2..size(rw)]; }
      if( rw1[size(rw1)]==0 ){ rw=rw[1..size(rw)-1]; }

      ring lastRing = char(basering),(T(1..nvars(newRing)-q)),(a(rw),dp);
   }
   else
   {
      ring lastRing = char(basering),(T(1..nvars(newRing)-q)),dp;
   }
   ideal lastmap;
   jj = 1;

   for(ii=1; ii<=size(rw1); ii++ )
   {
      if ( rw1[ii]==1 ) { lastmap[ii] = T(jj); jj=jj+1; }
      if ( rw1[ii]==0 ) { lastmap[ii] = 0; }
   }
   map phi1 = newRing,lastmap;
   ideal endid  = phi1(endid);      //### bottelneck
   ideal endphi = phi1(endphi);

/*
Versuch: subst statt phi
   for(ii=1; ii<=size(rw1); ii++ )
   {
      if ( rw1[ii]==1 ) { endid = subst(endid,var(ii),T(jj)); }
      if ( rw1[ii]==0 ) { endid = subst(endid,var(ii),0); }
   }
*/
   export(endid);
   export(endphi);
   list L = lastRing;
   setring newRing;
   return(L);
}

proc lipmanresolve(ideal i)
{    
 //--- assertion: i radical ideal and dim(i)=2
   i = std(i);
   int dbg = printlevel - voice + 2;

   if(mydimension(i) != 2)
   { "WARNING! The input is not of dimension 2!";
      "The result may be wrong.";}

   def BAS = basering;
   ideal irad = Radical(i);

   if(size(reduce(irad,std(i))) != 0)
   { "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
      i=irad;}

   list allRings,endRings;
   allRings[1] = BAS;
   ideal liph = maxideal(1);
   int e,d,ii;
   module path = [0,0,1]; //---[Start,Knoten,Zweig vom drÃ¼berliegenden Knoten]
   matrix Path = matrix(path);
   export(Path);

 while(ii < size(allRings))
 {
   ii++;
   def S = allRings[ii];
   setring S;
   if (size(i) == 0)
   { ideal s = 1;}
   else
   { ideal s = std(singid(i));}
   e = isnor(i);
   d = mydimension(s);

   if (e == 1 && d == -1)
   { 
//---S/i is normal and regular
       ideal lip = i;
       export(lip);
       export(liph);
       endRings[size(endRings)+1] = S;
       kill S;
   }

   if (e == 1 && d > -1)
   {
//---S/i is normal and singular
       list b = blowUp2(i,s);
       int r = size(b);
       int k;
       for (k=1;k<=r;k++)
        {
          def Newr1 = b[k];
          setring Newr1;
          def path = imap(S,path);
          path = path,[-1,ii+k-1,k];           //---path=path,[BlowUp,Knoten,Zweig vom drÃ¼berliegenden Knoten]
          matrix Path = matrix(path);
          export(Path);
          allRings[size(allRings)+1] = Newr1;
          ideal is = std(Jnew);
          ideal slis = std(singid(is));
          list E;                           //--- Checken, wie ich Divisoren sammle.....
          E[size(E)+1] = eD;
          int tt = mytransversalT(Jnew,E);

          if (tt == 1)
          { ideal i = Jnew;}
          else
          { ideal i = myintersect(Jnew,Radical(eD));}    //--- muss das wirklich Radical(ED) sein?

          map phi = S,bM;
          ideal liph = phi(liph);
          export(liph);
          kill Newr1,tt;
          setring S;
       }
       kill b,k,r,S;
   }


   if (e == 0)
   {
//---S/i is not normal

       if (charstr(S) == "integer")
       {  
          list n = normalZGLS(i);
          int rr = size(n[1]);
          rr;
          int kk;
          for (kk=1;kk<=rr;kk++)
          {                      
              def NewrZ = n[1][kk];                                           
              setring NewrZ;
              norid;
              normap;
              ideal endphi = normap;
              endphi;
              export(endphi);                   
              list elv = elimvar(norid);
              if(elv[4] == 1)
              {
                 def R2 = elv[1];
                 setring R2;
                 ideal norid = std(eli);
                 ideal normap = ephi;
              }
              def path = imap(S,path);
              path = path,[1,ii+kk-1,kk];                   //---path=path,[Normalisierung,Knoten,Zweig vom drÃ¼berliegenden Knoten]
              matrix Path = matrix(path);
              export(Path);
              map phi = S,normap;
              ideal liph = phi(liph);
              export(liph);
              ideal i = norid;
              export(i);
              if(elv[4] == 1)
              { allRings[size(allRings)+1] = R2;}
              else
              { allRings[size(allRings)+1] = NewrZ;}
              kill NewrZ;
              if(defined(R2))
              { kill R2;}
              setring S;
          } 
       }
       else
       {
          if (char(S) == 0)
          { list n = normal(i);}
          else
          { list n = normalP(i,"withRing");}

          int rr=size(n[1]);
          int kk;
          for (kk=1;kk<=rr;kk++)
          {                      
             def Newrk = n[1][kk];                         
             setring Newrk;
             def path = imap(S,path);
             path = path,[1,ii+kk-1,kk];             //---path=path,[Normalisierung,Knoten,Zweig vom Knoten]
             matrix Path = matrix(path);
             export(Path);
           
             if (char(S) == 0)
             {          
                int homo = homog(norid);
                intvec rw; 

                if(homo == 1)
                { rw = ringweights(Newrk);}

                list L = substpart(norid,normap,homo,rw);
                def newrk = L[1];
                setring newrk;
                allRings[size(allRings)+1] = newrk;
                ideal i = std(endid);
                export(i);
                ideal normap = endphi;                      
                def path = imap(Newrk,path);
                matrix Path = matrix(path);
                export(Path);
                kill homo,rw;
             }
             else
             { 
                ideal i = std(norid);
                export(i);
                allRings[size(allRings)+1] = Newrk;
             } 

             map nor = S,normap;
             ideal liph = nor(liph);
             export(liph);
             kill Newrk,newrk,L;
             setring S;
          }
       }
       kill kk,n,rr;
    }
 }  
 list result = endRings,allRings;
 return(result);
}

proc lipmanOutputText(int dbg)
{
  if ( dbg >= 0 )
  {
    "";
      "// 'normal' created a list, say l, of two elements.";
   
    "// To see the list type";
    "      l;";
    "";
    "// * l[1] is a list of", size(endRings)," normal and regular ring(s).";
    "// To access the i-th ring l[1][i], give it a name, say Ri, and type";
    "     def R1 = l[1][1]; setring R1; lipid; lipmap;";
    "// For the other rings type first (if R is the name of your base ring)";
    "     setring R;";
    "// and then continue as for R1.";
    "// Ri/lipid are the charts of the desingularized ring R/i";
 
    "";
    "// * l[2] shows all", size(allRings), "ring(s) that occur while computing.";
    "// To access the i-th ring l[2][j], give it a name, say ri, and type";
    "     def r1 = l[2][1]; setring r1; i; liph;";
   "// For the other rings type first (if R is the name of your base ring)";
    "     setring R;";
    "// and then continue as for r1.";
    "// ri/i are the charts of the normalizations and blowing ups of R/i";
 
  }
}
;
// ** loaded /usr/share/Singular/LIB/all.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/qmatrix.lib (13334,2010-09-29)
// ** loaded /usr/share/Singular/LIB/perron.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/nctools.lib (13467,2010-10-13)
// ** loaded /usr/share/Singular/LIB/ncdecomp.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/ncalg.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/involut.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gkdim.lib (12235,2009-11-03)
// ** loaded /usr/share/Singular/LIB/freegb.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmodvar.lib (13492,2010-10-14)
// ** loaded /usr/share/Singular/LIB/dmodapp.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmod.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/central.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/bfun.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/zeroset.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/weierstr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/tropical.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/triang.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/toric.lib (12330,2009-11-26)
// ** loaded /usr/share/Singular/LIB/teachstd.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surfex.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surf.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/stratify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/spectrum.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/spcurve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/solve.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/signcond.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/sing4ti2.lib (13269,2010-09-23)
// ** loaded /usr/share/Singular/LIB/sing.lib (12394,2010-01-04)
// ** loaded /usr/share/Singular/LIB/sheafcoh.lib (13328,2010-09-29)
// ** loaded /usr/share/Singular/LIB/sagbi.lib (13505,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsur.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsmr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rinvar.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/ring.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/reszeta.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resgraph.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/resbin.lib $Id: resbin.lib$
// ** loaded /usr/share/Singular/LIB/reesclos.lib (1.32,2001/01/16)
// ** loaded /usr/share/Singular/LIB/redcgs.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/realrad.lib (13352,2010-09-30)
// ** loaded /usr/share/Singular/LIB/random.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/qhmoduli.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/primitiv.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/primdec.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/presolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/polymake.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/poly.lib (12443,2010-01-19)
// ** loaded /usr/share/Singular/LIB/pointid.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/phindex.lib (12571,2010-03-01)
// ** loaded /usr/share/Singular/LIB/ntsolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/normaliz.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/normal.lib (13488,2010-10-14)
// ** loaded /usr/share/Singular/LIB/noether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mregular.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mprimdec.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/monomialideal.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/mondromy.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/modstd.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/matrix.lib (12898,2010-06-23)
// ** loaded /usr/share/Singular/LIB/makedbm.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/lll.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/linalg.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/latex.lib (13477,2010-10-13)
// ** loaded /usr/share/Singular/LIB/kskernel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/jacobson.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/intprog.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/inout.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/hyperel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/homolog.lib (12381,2009-12-11)
// ** loaded /usr/share/Singular/LIB/hnoether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/grwalk.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/groups.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/graphics.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gmssing.lib (13548,2010-10-19)
// ** loaded /usr/share/Singular/LIB/gmspoly.lib (12529,2010-02-08)
// ** loaded /usr/share/Singular/LIB/general.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/finvar.lib (13326,2010-09-29)
// ** loaded /usr/share/Singular/LIB/equising.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/elim.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/deform.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/decodegb.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/curvepar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/crypto.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/control.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/compregb.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/classify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/cimonom.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/brnoeth.lib (13312,2010-09-29)
// ** loaded /usr/share/Singular/LIB/atkins.lib (12932,2010-06-30)
// ** loaded /usr/share/Singular/LIB/assprimeszerodim.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/arcpoint.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/algebra.lib (12436,2010-01-15)
// ** loaded /usr/share/Singular/LIB/alexpoly.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/aksaka.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/ainvar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/absfact.lib (13534,2010-10-18)
// ** loaded /usr/share/Singular/LIB/primdecint.lib (13403,2010-10-06)
> ring r=integer,(x,y,z),dp;
// ** You are using coefficient rings which are not fields.
// ** Please note that only limited functionality is available
// ** for these coefficients.
// ** 
// ** The following commands are meant to work:
// ** - basic polynomial arithmetic
// ** - std
// ** - syz
// ** - lift
// ** - reduce
> ideal i=x2y+5z3-6;
> isnor(i);
1
> slocusZ(i);
_[1]=1
> ideal j=testideal(i);
> j;
j[1]=-6
j[2]=-z
j[3]=-x
> minAssZ(i);
[1]:
   _[1]=x2y+5z3-6
> minAssZ(j);
[1]:
   _[1]=2
   _[2]=z
   _[3]=x
[2]:
   _[1]=3
   _[2]=z
   _[3]=x
> singid(i);
_[1]=1
> r2=0,(x,y,z),dp;
   ? `r2` is undefined
   ? error occurred in or before STDIN line 2006: `r2=0,(x,y,z),dp;`
> ring r2=0,(x,y,z),dp;
> ideal i=fetch(r,i);
> i;
i[1]=x2y+5z3-6
> i=std(i);
> slocus(i);
_[1]=x2y+5z3-6
_[2]=15z2
_[3]=x2
_[4]=2xy
> std(slocus(i);
   ? error occurred in or before STDIN line 2012: `  return(i);`
   ? last reserved name was `return`
 error at token `;`
> std(slocus(i));
_[1]=1
> setring r;
> ideal i=y2z+yz2-x3+xz2;
// ** redefining i **
> mydimension(i);
3
> slocusZ(i);
_[1]=z
_[2]=y
_[3]=x
> isnor(i);
1
> ring rr=37,(x,y,z),dp;
> ideal i=fetch(r,i);
> i;
i[1]=-x3+y2z+xz2+yz2
> slocusZ(i);
_[1]=z
_[2]=y
_[3]=x
> slocus(i);
_[1]=-x3+y2z+xz2+yz2
_[2]=y2+2xz+2yz
_[3]=2yz+z2
_[4]=-3x2+z2
> std(slocus(i));
_[1]=yz-18z2
_[2]=y2+2xz-z2
_[3]=x2+12z2
_[4]=xz2-5z3
> ring r2=2,(x,y,z),dp;
// ** redefining r2 **
> ideal i=fetch(r,i);
> i;
i[1]=x3+y2z+xz2+yz2
> std(slocus(i));
_[1]=z2
_[2]=y2
_[3]=x2
> ring r3=3,(x,y,z),dp;
> ideal i=fetch(r,i);
> std(slocus(i));
_[1]=z2
_[2]=yz
_[3]=y2-xz
_[4]=x3
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r5=5,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r7=7,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r13=13,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r17=17,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r19=19,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r23=23,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r29=29,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r31=31,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=z
_[2]=y
_[3]=x
> ring r37=37,(x,y,z),dp;
> ideal i=fetch(r,i);
> radical(slocus(i));
_[1]=y-18z
_[2]=x-5z
> "einzige Faser, die nicht regulÃ¤r ist, da ideal(x,y,z) als irrelevates ideal im Projektiven nicht zÃ¤hlt";
einzige Faser, die nicht regulÃ¤r ist, da ideal(x,y,z) als irrelevates ideal im Projektiven nicht zÃ¤hlt
> "wie finde ich die singulÃ¤re Faser?";
wie finde ich die singulÃ¤re Faser?
> setring r1;
   ? r1 is no name of a ring/qring
   ? error occurred in or before STDIN line 2062: `setring r1;`
> setring r2;
> r2;
//   characteristic : 2
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x y z
//        block   2 : ordering C
> ring r0=0,(x,y,z),dp;
> ring r0=0,(x,y,z),lp;
// ** redefining r0 **
> ideal i=fetch(r,i);
> i;
i[1]=-x3+xz2+y2z+yz2
> ring rtest=integer,(x,y,z),lp;
> ideal i=fetch(r,i);
> i;
i[1]=-x3+xz2+y2z+yz2
> ideal Ji=jacob(i),i;
> Ji=std(Ji);
   ? error occurred in or before STDIN line 2073: `> Ji=std(Ji);`
   skipping text from `=` error at token `)`
> ideal Ji=jacob(i),i;
> 
// ** redefining Ji **
. ;
   ? error occurred in or before STDIN line 2076: `;`
 error at token `;`
> ideal Ji=jacob(i);
// ** redefining Ji **
> Ji;
Ji[1]=-3x2+z2
Ji[2]=2yz+z2
Ji[3]=2xz+y2+2yz
> Ji=Ji,i;
> Ji;
Ji[1]=-3x2+z2
Ji[2]=2yz+z2
Ji[3]=2xz+y2+2yz
Ji[4]=-x3+xz2+y2z+yz2
> Ji=std(Ji);
> Ji;
Ji[1]=37z4
Ji[2]=2yz+z2
Ji[3]=yz3+19z4
Ji[4]=y2z2+14yz3+16z4
Ji[5]=2y3+5y2z+2yz2
Ji[6]=y3z+7y2z2+10yz3+8z4
Ji[7]=y4+y3z-5y2z2-6yz3-4z4
Ji[8]=2xz+y2+2yz
Ji[9]=-xz2+y3+2y2z
Ji[10]=3xy2+6xyz+2z3
Ji[11]=xy2z+6xyz2-y4-2y3z+2z4
Ji[12]=-xy3-xy2z+2xyz2+z4
Ji[13]=-3x2+z2
Ji[14]=x2z-xy2-2xyz-z3
Ji[15]=-x2y2-2x2yz+y2z2+yz3
Ji[16]=-x3+xz2+y2z+yz2
> radicalZ(Ji);
_[1]=37z
_[2]=y+93z
_[3]=x+69z
> "z verschwindet im testideal von X_37";
z verschwindet im testideal von X_37
> 
