> ring r=3,(x,y),dp;
> LIB "normal.lib";

> ideal i=x2-y3;
> list n=normalP(i,"withRing");
> n;
[1]:
   [1]:
      //   characteristic : 3
//   number of vars : 1
//        block   1 : ordering dp
//                  : names    T(1)
//        block   2 : ordering C
[2]:
   [1]:
      _[1]=y2
      _[2]=x
[3]:
   [1]:
      1
   [2]:
      1
> def R1=n[1][1];
> setring R1;
> norid;
norid[1]=0
> normap;
normap[1]=T(1)^3
normap[2]=T(1)^2
> setring r;
> list nn=normalP(i);

// 'normalP' computed a list, say nor, of two lists:
// To see the result, type
     nor;

// * nor[1] is a list of 1 ideal(s), where each ideal nor[1][i] consists
// of elements g1..gk of the basering R such that gj/gk generate the integral
// closure of R/P_i (where P_i is a min. associated prime of the input ideal)
// as R-module in the quotient field of R/P_i;

// * nor[2] shows the delta-invariant of each component and of the input ideal
// (-1 means infinite, and 0 that R/P_i is normal).
> nn;
[1]:
   [1]:
      _[1]=y2
      _[2]=x
[2]:
   [1]:
      1
   [2]:
      1
> ring R=11,(x,y,z),wp(2,1,2);
> ideal i=x*(z3 - xy4 + x2);
> list nor=normalP(i);

// 'normalP' computed a list, say nor, of two lists:
// To see the result, type
     nor;

// * nor[1] is a list of 2 ideal(s), where each ideal nor[1][i] consists
// of elements g1..gk of the basering R such that gj/gk generate the integral
// closure of R/P_i (where P_i is a min. associated prime of the input ideal)
// as R-module in the quotient field of R/P_i;

// * nor[2] shows the delta-invariant of each component and of the input ideal
// (-1 means infinite, and 0 that R/P_i is normal).
> nor;
[1]:
   [1]:
      _[1]=1
   [2]:
      _[1]=1
[2]:
   [1]:
      0,0
   [2]:
      -1

> setring r;
> n;
[1]:
   [1]:
      //   characteristic : 3
//   number of vars : 1
//        block   1 : ordering dp
//                  : names    T(1)
//        block   2 : ordering C
[2]:
   [1]:
      _[1]=y2
      _[2]=x
[3]:
   [1]:
      1
   [2]:
      1
> 
