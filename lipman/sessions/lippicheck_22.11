                     SINGULAR                                 /
 A Computer Algebra System for Polynomial Computations       /   version 3-1-2
                                                           0<
 by: W. Decker, G.-M. Greuel, G. Pfister, H. Schoenemann     \   Oct 2010
FB Mathematik der Universitaet, D-67653 Kaiserslautern        \
> LIB "all.lib";
LIB "primdecint.lib";

proc mydimension(ideal i) 
{
  i = std(i);
  def BAS = basering;
  ideal r = 1;

  if(size(i) == 0)
  {        
     return(nvars(BAS)+1);
  }
        
  if (reduce(r,i) == 0)
  {       
     return(-1);
  }
           
  if (charstr(BAS)=="integer")
  {
     if (deg(i[1]) == 0)
     {
	ideal i_ = i[2..size(i)];
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }
	
     if (deg(i[size(i)]) == 0)
     {
	ideal i_ = i[1..size(i)-1] ;
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }

     ring r = 0,x(1..nvars(BAS)),dp;
     ideal ii =fetch(BAS,i);
     ii = std(ii);
     return(dim(ii)+1);
  }
  else
  {
     return(dim(i));
  }
}

proc myheight(i) 
{
  i=std(i);
  if(charstr(basering)=="integer")
  {
     return(nvars(basering)+1-mydimension(i));
  }
  else
  {
     return(nvars(basering)-dim(i));
  }
}

proc myintersect(ideal i, ideal j) 
{
  i=std(i);
  j=std(j);
  def BAS = basering;
  if (charstr(BAS)=="integer")
  {
     string tempstr="ring r2=integer,("+varstr(BAS)+",t),dp;";
  }
  else
  {
     string tempstr="ring r2="+charstr(BAS)+",("varstr(BAS)+",t),dp;";
  }
	
  execute(tempstr);
  ideal J = 0;
  int k;
  ideal ii=fetch(BAS,i);
  for(k=1; k <= size(ii); k++)
  {
     J=J,t*ii[k];
  }
  ideal jj=fetch(BAS,j);
  for(k=1; k <= size(jj); k++)
  {
     J=J,(1-t)*jj[k];
  }
  ideal e=eliminate(J,t);
  setring BAS;
  return(fetch(r2,e));
}

proc mysat(ideal i, poly f)
{
  def BAS = basering	;
  ring newR = integer,(X(1..nvars(BAS)),T),dp ;
  map psi=BAS,maxideal(1);
  ideal Q=psi(i),1-T*psi(f);
  Q=std(Q);
  ideal e=eliminate(Q,T);
  setring BAS;
  ideal result=fetch(newR,e);
  return(result);
}

proc myradical(ideal i) 
{
  i=std(i);
  def BAS = basering;
  if (charstr(BAS)=="integer")
  {
     int j;
     poly p = 1;
     for(j = 1;j<=nvars(BAS);j++)
     {
        p = p*var(j);
     }
     ideal e = eliminate(i,p);
     ideal radi=1;
     if(e[1]==1 || e[1] == -1)
     {
	return(radi);
     }
     if(e[1]!=0)
     {
	string tempstr="int k="+string(e[1])+";";
	execute(tempstr);
	list prdiv = primefactors(k)[1];
	for(j=1; j <= size(prdiv); j++)
	{
	   ring rj = prdiv[j],x(1..nvars(BAS)),dp;
	   ideal radij = radical(fetch(BAS,i));
	   radij = std(radij);
	   setring BAS;
	   ideal radij2=fetch(rj,radij);
	   radij2=radij2,prdiv[j];
	   radij2 = std(radij2);
	   radi=myintersect(radi,radij2);
           kill rj,radij2;
	}
     }
     else
     {
	poly g=1;
	for(j=1; j<= size(i); j++)
	{
	   g = g*leadcoef(i[j]);
	}
	ideal rig = i,g;
	rig=myradical(rig);
	ring rq=0,x(1..nvars(BAS)),dp;
	ideal riq=radical(fetch(BAS,i));
	riq=std(riq);
	ideal B;
	for(j=1;j<=size(riq);j++)
	{
	   B[j]=cleardenom(riq[j]);
	}
	poly s=1;
	for(j=1;j<=size(B);j++)
	{
	   s=s*leadcoef(B[j]);
	}
	setring BAS;
	ideal riginf=mysat(fetch(rq,B),fetch(rq,s));
	radi=myintersect(rig,riginf);
     }
	return(radi);
  } 
  else 
  {
     return(radical(i));
  }
}

proc myquotient(i,j1,j2) 
{
  def BAS=basering;
  int j;
  ideal q=1;
             
  for(j=1; j <= size(j2); j++)
  {
     ideal s = j2[j],-j1,-i;
     matrix m = matrix(syz(s));
     m = m[1,1..ncols(m)];
     matrix n[1][ncols(m)] = m[1,1..ncols(m)];
     ideal qq = n;
     q = intersect(q,qq);
     kill m,n,qq,s;
  }
  return(std(q));
}

proc homjj(i,j) 
{
  def BAS = basering;
  poly a=j[1];
  ideal aJJ=myquotient(i,a*j,j),i;            
  aJJ=std(aJJ);
  ideal aa=a;
  aa=std(aa);
  ideal rf = interred(reduce(aJJ,aa));

  if (size(rf)==0) 
  {                                      // j[1]*j:j = ideal(j[1]) modulo i                  
     ideal homj=i;
     ideal endphi=maxideal(1);
     export(homj);
     export(endphi);
     list result=BAS,"homj","endphi",0;
     return(result);
  } 
  else 
  {
     ideal f=j[1],rf;
     int n = size(f);

     ring newR1 = integer,(X(1..nvars(BAS)),T(1..n)),dp;

     ideal f=fetch(BAS,f);
     ideal i=fetch(BAS,i);
     ideal Q=i;
     poly a=fetch(BAS,a);
     ideal af=a*f,i;

     matrix T=matrix(ideal(T(1..n)),1,n);
     int ii,jj,kk;
     matrix A;
     for(ii=2;ii<=n;ii++) 
     {
	for(jj=2;jj<=ii;jj++) 
        {
	   A=lift(af,f[ii]*f[jj]);
//--- lift function is only working up to sign!
	   poly q=0;
	   for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   }
				
	   if (q == f[ii]*f[jj])
	   {
	      matrix AA[n][1]=A[1..n,1];
	   }
	   else
	   {
	      matrix AA[n][1]=-A[1..n,1];
	   }
                               
	   Q = Q,ideal(T(ii)*T(jj) - T*AA);
           kill AA;
           kill q;
	}
     }

     ideal fi = f,i;
     matrix syzfi=matrix(syz(fi));
     matrix syzfii[n][n]=syzfi[1..n,1..n];

     Q = Q,ideal(T*syzfii);
     Q = subst(Q,T(1),1);
                
     ring newR2 = integer,(X(1..nvars(BAS)),T(2..n)),dp;

     ideal homj = imap(newR1,Q);
     homj = std(homj);
     ideal endphi = ideal(X(1..nvars(BAS)));
     export(homj);
     export(endphi);
     list result = newR2,"homj","endphi",1;
     return(result);
  }
}

proc testideal(ideal i) 
{
  if(size(i) == 0)
  {
     ideal result = 1;
     return(result);
  }

  i=std(i);
  ideal j = minor(jacob(i),myheight(i));
  ideal tmp = i,j;
  ideal result = myradical(tmp);
  return(result);
}

proc elimvar(ideal i)
{
	def BAS=basering;
	int n=size(i);
	int j;

        if (defined(phi))
        {ideal endphi=phi; kill phi;}

        poly tt;
        int pos;
        for(j=1;j<=n;j++)
	{                
		// --- Schauen, ob lineare Monome in i[j] existieren
	        tt=jet(i[j],1)-jet(i[j],0);
		  // --- Monome gefunden
		pos=0;
		int k;
		for(k=1;k<=size(tt);k++)
		{
			if ((leadcoef(tt[k]) == 1 || leadcoef(tt[k]) == -1) && (pos == 0))
			{
				pos=k;
			}
		}
                kill k;

            if (pos > 0)
            { 
		poly t=tt[pos];
                kill tt;
                kill pos;
		if (deg(t) > 0 && (leadcoef(t) == 1 || leadcoef(t) == -1))
		{
			poly v=leadcoef(t)*t;
                        attrib(v,"isSB",1);
			int b = 0;
			int k;
			poly rest=i[j]-t;

			for(k=1;k<=size(rest);k++)
			{
				if (reduce(rest[k],v) == 0)
				{
					b = 1;
				}
			}
                        kill k;
			if (b == 0)
			{
				if (leadcoef(t) == 1)
				{
					poly replace=-(i[j]-t);
				}
				else
				{
					poly replace=i[j]-t;       
				}
                                kill j;
                                ideal QQ = subst(i,v,replace);
                                QQ=simplify(QQ,2);
                                ideal phi=subst(endphi,t,replace);
                                string s=varstr(BAS);
				string strv = string(v);
				int p=find(s,strv);               

				if (p > 1 && p < size(s))
				{
					string ns=string(s[1..p-1])+string(s[p+1+size(strv)..size(s)]);
				}

				if (p == 1)
				{
					string ns=string(s[2+size(strv)..size(s)]);
				}
				
				if (p+size(strv)-1 == size(s))
				{
					string ns=string(s[1..size(s)-size(strv)-1]);
				}
				
				string tmpstr="ring newR1 = integer,("+ns+"),dp;";

				execute(tmpstr);
				ideal i=imap(BAS,QQ);
                                ideal phi=imap(BAS,phi);
                                export(phi);
				list result=elimvar(i);
				result[4]=1;				
			        setring BAS;
				return (result);
			}
		}
            }
	}
	ideal eli=i;
	export(eli);
        ideal ephi=endphi;
        export(ephi);
	list result = BAS,"eli","ephi",0;
	return(result);
}


proc getGenerators(ideal J, ideal U, poly c)
{
//--- Computes the generators of J as an ideal in the original quotient-ring r/i,
//--- where J is given by generators in the new ring.
//--- The new ring is given by 1/c * U (U = myquotient(i,p*j,j)) in the total ring of fractions.

  int i, j;                             
  int dbg = printlevel - voice + 2;     // dbg = printlevel (default: dbg = 0)
  poly p;                               // The lifted polynomial
  ideal Jstd = std(J);                  // standard base of J

  if(dbg>1){"Checking for new generators...";}
  for(i = 1; i <= ncols(J); i++)
  {
    for(j = 1; j <= ncols(U); j++)
    {
      p = lift(c, J[i]*U[j])[1,1];
      p = reduce(p, Jstd);
      if(p != 0)
      {
        if(dbg>1)
        {
          "New polynomial added:", p;
          if(dbg>4) {pause();}
        }
        Jstd = Jstd, p;
        Jstd = std(Jstd);
        J = J, p;
      }
    }
  }
  return(J);
}


proc mynormal(ideal i) 
{
	def BAS=basering;
	ideal j=testideal(i);                                           
        list h=homjj(i,j);

	if (h[4] == 0)
	{
		def NewR = h[1];
		setring NewR;
		ideal nor = homj;

                if (defined(ephi))
                {ideal normap = ephi;}
                else
                {ideal normap = endphi;}

     
		export(nor);
                export(normap);
		list result = BAS,"nor","normap";
		setring BAS;
		return(result);
	}
	else
	{
                def NewR = h[1];
		setring NewR;
		list e = elimvar(homj);
		def NewR1 = e[1];
		setring NewR1;
                ideal i = std(eli);
                ideal ii = fetch(BAS,i);
                ii = std(ii);
                ideal c1 = interred(reduce(ii,i));
                ideal c2 = interred(reduce(i,ii));

                if (size(c1)==0 && size(c2)==0)
                {
                ideal nor = i;
                export(nor);
                ideal normap = ephi;
                export(normap);
                list result = NewR1,"nor","normap";
                setring BAS;
                return(result);
                }

                else
                {
		list result = mynormal(i);
		setring BAS;
                return(result);
                }
              
	}
	
}

proc normalZ(ideal i)
{                                                                          // AM 8.9.GEÄNDERT!
    def BAS = basering;
  ideal irad = myradical(i);

  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i=irad;
  }

  list A = minAssZ(i);
  int k = size(A);
  int j;
  list NL;
  for(j=1;j<=k;j++)
  { 
     ideal api = A[j];
     if (deg(api[1]) == 0)
     {
        "field";
        int p = int(api[1]);
        ring rnew = p,x(1..nvars(BAS)),dp; 
        ideal api = fetch(BAS,api);
        list n = normalP(api,"withRing");
        def r1 = n[1][1];
        setring r1;
        ideal nor = norid;
        export(nor);
        NL[j] = r1,"nor","normap";
        setring BAS;
        kill p,rnew,api,r1;
     }

     else  
     {   
        "integers";   
        NL[j] = mynormal(api);
        kill api;
     }
  }
  return(NL);
}

proc normalZalt(ideal i)
{                                                                          // ohne integers
  def BAS = basering;
  list L = minAssZ(i);
  ideal irad = radical(i);
  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i = irad;
  }

  int n = size(L);
  int j;
  list NL;
  for(j=1;j<=n;j++)
  {
     ideal api = L[j][2];     
     NL[j] = mynormal(api);
     kill api;
  }

  return(NL);
};

// ** loaded /usr/share/Singular/LIB/all.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/qmatrix.lib (13334,2010-09-29)
// ** loaded /usr/share/Singular/LIB/perron.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/nctools.lib (13467,2010-10-13)
// ** loaded /usr/share/Singular/LIB/ncdecomp.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/ncalg.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/involut.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gkdim.lib (12235,2009-11-03)
// ** loaded /usr/share/Singular/LIB/freegb.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmodvar.lib (13492,2010-10-14)
// ** loaded /usr/share/Singular/LIB/dmodapp.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmod.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/central.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/bfun.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/zeroset.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/weierstr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/tropical.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/triang.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/toric.lib (12330,2009-11-26)
// ** loaded /usr/share/Singular/LIB/teachstd.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surfex.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surf.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/stratify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/spectrum.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/spcurve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/solve.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/signcond.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/sing4ti2.lib (13269,2010-09-23)
// ** loaded /usr/share/Singular/LIB/sing.lib (12394,2010-01-04)
// ** loaded /usr/share/Singular/LIB/sheafcoh.lib (13328,2010-09-29)
// ** loaded /usr/share/Singular/LIB/sagbi.lib (13505,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsur.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsmr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rinvar.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/ring.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/reszeta.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resgraph.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/resbin.lib $Id: resbin.lib$
// ** loaded /usr/share/Singular/LIB/reesclos.lib (1.32,2001/01/16)
// ** loaded /usr/share/Singular/LIB/redcgs.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/realrad.lib (13352,2010-09-30)
// ** loaded /usr/share/Singular/LIB/random.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/qhmoduli.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/primitiv.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/primdec.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/presolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/polymake.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/poly.lib (12443,2010-01-19)
// ** loaded /usr/share/Singular/LIB/pointid.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/phindex.lib (12571,2010-03-01)
// ** loaded /usr/share/Singular/LIB/ntsolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/normaliz.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/normal.lib (13488,2010-10-14)
// ** loaded /usr/share/Singular/LIB/noether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mregular.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mprimdec.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/monomialideal.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/mondromy.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/modstd.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/matrix.lib (12898,2010-06-23)
// ** loaded /usr/share/Singular/LIB/makedbm.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/lll.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/linalg.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/latex.lib (13477,2010-10-13)
// ** loaded /usr/share/Singular/LIB/kskernel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/jacobson.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/intprog.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/inout.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/hyperel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/homolog.lib (12381,2009-12-11)
// ** loaded /usr/share/Singular/LIB/hnoether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/grwalk.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/groups.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/graphics.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gmssing.lib (13548,2010-10-19)
// ** loaded /usr/share/Singular/LIB/gmspoly.lib (12529,2010-02-08)
// ** loaded /usr/share/Singular/LIB/general.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/finvar.lib (13326,2010-09-29)
// ** loaded /usr/share/Singular/LIB/equising.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/elim.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/deform.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/decodegb.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/curvepar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/crypto.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/control.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/compregb.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/classify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/cimonom.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/brnoeth.lib (13312,2010-09-29)
// ** loaded /usr/share/Singular/LIB/atkins.lib (12932,2010-06-30)
// ** loaded /usr/share/Singular/LIB/assprimeszerodim.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/arcpoint.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/algebra.lib (12436,2010-01-15)
// ** loaded /usr/share/Singular/LIB/alexpoly.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/aksaka.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/ainvar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/absfact.lib (13534,2010-10-18)
// ** loaded /usr/share/Singular/LIB/primdecint.lib (13403,2010-10-06)
. ;
> LIB "all.lib";
LIB "primdecint.lib";


proc isnor(ideal i)
{       def BAS = basering;

        if (dim(i) == -1)
        {
            int isn = 1; 
            return(isn);
        }

        ideal j = testideal(i);
        qring q = std(i);
        setring q;
        ideal j = fetch(BAS,j);
        poly a = j[1];
	ideal aJJ=quotient(a*j,j);            
	aJJ=std(aJJ);
	ideal aa=a;
	aa=std(aa);
	ideal rf = interred(reduce(aJJ,aa));

	if (size(rf)==0)
        {
         int isn = 1;
        }
         
        else
        {
         int isn = 0;
        }

        return(isn);
        setring BAS;
}

proc isprimZ(ideal i)
{
  list p =  minAssZ(i);
  int j;
  if(size(p) == 1)
  { j=1;}
  return(j);
}

proc slocusZ(ideal i)
{
  i = std(i);
  ideal j = testideal(i);
  ideal s = 1;
  list ma = minAssZ(j);
  int ii;
  int k = size(ma);
  for (ii=1;ii<=k;ii++)
  {
     ideal m = ma[ii];
     ideal qm = m^2;
     qm = std(qm);
     ideal sl = reduce(i,qm);
     if (size(sl) == 0)
     { s = myintersect(s,m);}
     kill m,qm,sl;
  }   

  s = std(s);
  return(s);
}

proc substpart(ideal endid, ideal endphi, int homo, intvec rw)
{
   def newRing = basering;
   int ii,jj;
   map phi = newRing,maxideal(1);    
   list Le = elimpart(endid);
   int q = size(Le[2]);    
   intvec rw1 = 0;        
   rw1[nvars(basering)] = 0;
   rw1 = rw1+1;            //rw1=1,..,1 (as many 1 as nvars(basering))

   while( size(Le[2]) != 0 )
   {
      endid = Le[1];
      if ( defined(ps) )
      { kill ps; }
      map ps = newRing,Le[5];
      phi = ps(phi);
      for(ii=1;ii<=size(Le[2]);ii++)
      {
         phi=phi(phi);
      }
      //eingefuegt wegen x2-y2z2+z3

      for( ii=1; ii<=size(rw1); ii++ )
      {
         if( Le[4][ii]==0 )        //ii = index of var which was substituted
         {
            rw1[ii]=0;             //substituted vars have entry 0 in rw1
         }
      }
      Le=elimpart(endid);          //repeated application of elimpart
      q = q + size(Le[2]);
   }
   endphi = phi(endphi);
   if( nvars(newRing) == q )
   {
     ring lastRing = char(basering),T(1),dp;
     ideal endid = T(1);
     ideal endphi = T(1);
     for(ii=2; ii<=q; ii++ )
     {
        endphi[ii] = 0;
     }
     export(endid,endphi);
     list L = lastRing;
     setring newRing;
     return(L);
   }

   if (homo==1 && nvars(newRing)-q >1 && size(endid) >0 )
   {
      jj=1;
      for( ii=2; ii<size(rw1); ii++)
      {
         jj++;
         if( rw1[ii]==0 )
         {
            rw=rw[1..jj-1],rw[jj+1..size(rw)];
            jj=jj-1;
         }
      }
      if( rw1[1]==0 ) { rw=rw[2..size(rw)]; }
      if( rw1[size(rw1)]==0 ){ rw=rw[1..size(rw)-1]; }

      ring lastRing = char(basering),(T(1..nvars(newRing)-q)),(a(rw),dp);
   }
   else
   {
      ring lastRing = char(basering),(T(1..nvars(newRing)-q)),dp;
   }
   ideal lastmap;
   jj = 1;

   for(ii=1; ii<=size(rw1); ii++ )
   {
      if ( rw1[ii]==1 ) { lastmap[ii] = T(jj); jj=jj+1; }
      if ( rw1[ii]==0 ) { lastmap[ii] = 0; }
   }
   map phi1 = newRing,lastmap;
   ideal endid  = phi1(endid);      //### bottelneck
   ideal endphi = phi1(endphi);

/*
Versuch: subst statt phi
   for(ii=1; ii<=size(rw1); ii++ )
   {
      if ( rw1[ii]==1 ) { endid = subst(endid,var(ii),T(jj)); }
      if ( rw1[ii]==0 ) { endid = subst(endid,var(ii),0); }
   }
*/
   export(endid);
   export(endphi);
   list L = lastRing;
   setring newRing;
   return(L);
}
      
   
proc lipmanresolvealt(ideal i)
{    
 //--- assertion: i radical ideal and dim(i)=2
     i=std(i);

     if(dim(i) != 2)
     {
         "WARNING! The input is not of dimension 2!";
         "The result may be wrong.";
     }

     def BAS=basering;
     ideal irad=radical(i);

     if(size(reduce(irad,std(i))) != 0)
     {
         "WARNING! The input is not reduced!";
         "We will continue with the reduced part of input";
          i=irad;
     }

     if (size(i) == 0)
     { ideal s = 1;}

     else
     { ideal s = std(slocus(i));}
       
     int e = isnor(i);
     int d = dim(s);
     list nm,isno,issing,b,bl2,result;

if (e == 1 && d > -1)
  //---BAS/i is normal and singular
     {
         list b = blowUp2(i,s);
         int r=size(b);
         int k;
         for (k=1;k<=r;k++)
         {
             def Newr1 = b[k];
             setring Newr1;
             ideal i = std(Jnew,radical(eD));
             ideal s = std(radical(slocus(Jnew)));
             isno[k]=isnor(i);

             if (isnor(i) == 1 && dim(s) == -1)
             { 
                nm[k] = Newr1;
                ideal i = lip;
                ideal liph = bM;
                export(lip);
                export(liph);
                
             }
             
             else
             { 
                e = 0;
             }
         }
     }


if (e == 0)
     {
//---BAS/i is not normal
         if (char(BAS) == 0)
         { list n = normal(i);}
    
         else
         { list n = normalP(i,"withRing");}
       
         intvec rw;  
         int rr=size(n[1]);
         int kk,in;
            
         for (kk=1;kk<=rr;kk++)
         {                      
             def Newrk = n[1][kk];                         
             setring Newrk;
             map phi = BAS,normap;
 
             if (defined(liph))
                { ideal normap = phi(liph);}
             
             if (char(BAS) == 0)
             {          
                int homo = homog(norid);

                if(homo == 1)
                   { rw = ringweights(Newrk);}

                list L = substpart(norid,normap,homo,rw);
                def newrk = L[1];
                setring newrk;
                ideal i = std(endid);
                kill homo;
             }

             else
             {   
                ideal i = std(norid);
             }

             if (size(i) == 0)
                {ideal s = 1; isno[kk] = 1;}

             else
                { ideal s = std(radical(slocus(i))); isno[kk]=isnor(i);}

             if (size(reduce(1,s)) == 0)
             {    
                 issing[kk] = 0;
                 nm[kk] = newrk;
                 module path = kk;
                 export(path);
                 ideal lip = i;
                 ideal liph = endphi;
                 export(lip);
                 export(liph);
             }
                
             else
             {
                 b = blowUp2(i,s);
                 int r = size(b);
                 int k;
                 for (k=1;k<=r;k++)
                 {
                     def Newr1 = b[k];
                     setring Newr1;
                     ideal i = std(Jnew,radical(eD));
                     map phi = BAS,bM;

                     if (defined(endphi))
                     { ideal liph = phi(endphi);}

                     else
                     { ideal liph = bM;}
       
                     export(liph);
                     in = isnor(i);

                     if (in == 1)
                     {  
                        bl2[k]= Newr1;
                        ideal lip = i;
                        module path = [kk,k];
                        export(path);
                        export(lip);
                     }

                 kill Newr1;

                 }
             } 

             kill Newrk,L;
             setring BAS;
 
         }
     }
     
     if (size(nm) !=0 && size(bl2) != 0)
     { result = nm,bl2;}

     if (size(bl2) == 0)
     { result = nm;}

     else
     { result = bl2;}

     return(result);
}   





proc lipmanresolve2(ideal i)
{    
 //--- assertion: i radical ideal and dim(i)=2
   i = std(i);
   int dbg = printlevel - voice + 2;

   if(dim(i) != 2)
   { "WARNING! The input is not of dimension 2!";
      "The result may be wrong.";}

   def BAS = basering;
   ideal irad = radical(i);

   if(size(reduce(irad,std(i))) != 0)
   { "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
      i=irad;}

   list allRings,endRings;
   allRings[1] = BAS;
   int e,d,ii;

 while(ii < size(allRings))
 {
   ii++;
   def S = allRings[ii];
   setring S;
   
   if (size(i) == 0)
   { ideal s = 1;}

   else
   { ideal s = std(slocus(i));}
       
   e = isnor(i);
   d = mydimension(s);

   if (e == 1 && d == -1)
   { 
//---S/i is normal and regular
       ideal lip = i;

       if (defined(liph) == 0)
       { ideal liph = maxideal(1);}

       export(lip);
       endRings[size(endRings)+1] = S;
       kill S;
   }

   if (e == 1 && d > -1)
   {
//---S/i is normal and singular
       list b = blowUp2(i,s);
       int r = size(b);
       int k;
       for (k=1;k<=r;k++)
       {
          def Newr1 = b[k];
          setring Newr1;
          allRings[size(allRings)+1] = Newr1;
          ideal is = std(Jnew,myradical(eD));
          ideal slis = std(slocus(is));

          if (size(slis) == 1 && deg(slis[1]) == 0)
          { ideal i = Jnew;}
          
          else
          { ideal i = myintersect(Jnew,myradical(eD));}

          map phi = S,bM;

          if (defined(liph))
          { ideal liph = phi(liph);}

          else
          { ideal liph = maxideal(1);}

          export(liph);
          kill Newr1;
          setring S;
       }

       kill b,k,r,S;
   }


   if (e == 0)
   {
//---S/i is not normal
       if (char(S) == 0)
       { list n = normal(i);}
    
       else
       { list n = normalP(i,"withRing");}
        
       int rr=size(n[1]);
       int kk;
            
       for (kk=1;kk<=rr;kk++)
       {                      
           def Newrk = n[1][kk];                         
           setring Newrk;
           map nor = S,normap;
 
           if (defined(liph))
           { ideal liph = nor(liph);}

           else
           { ideal liph = normap;}
             
           if (char(S) == 0)
           {          
              int homo = homog(norid);
              intvec rw; 

              if(homo == 1)
              { rw = ringweights(Newrk);}

              list L = substpart(norid,normap,homo,rw);
              def newrk = L[1];
              setring newrk;
              allRings[size(allRings)+1] = newrk;
              ideal i = std(endid);
              map phi = Newrk,endphi;
              ideal liph = phi(liph);
              kill homo,rw,phi,newrk;
           }

           else
           { 
              ideal i = std(norid);
              allRings[size(allRings)+1] = Newrk;
           } 

           export(liph);
           kill Newrk,L;
           setring S;
       }

       kill kk,n,rr;
    }
 }  
 
 list result = endRings,allRings;
 return(result);
}

proc lipmanOutputText(int dbg)
{
  if ( dbg >= 0 )
  {
    "";
      "// 'normal' created a list, say l, of two elements.";
   
    "// To see the list type";
    "      l;";
    "";
    "// * l[1] is a list of", size(endRings)," normal and regular ring(s).";
    "// To access the i-th ring l[1][i], give it a name, say Ri, and type";
    "     def R1 = l[1][1]; setring R1; lipid; lipmap;";
    "// For the other rings type first (if R is the name of your base ring)";
    "     setring R;";
    "// and then continue as for R1.";
    "// Ri/lipid are the charts of the desingularized ring R/i";
 
    "";
    "// * l[2] shows all", size(allRings), "ring(s) that occur while computing.";
    "// To access the i-th ring l[2][j], give it a name, say ri, and type";
    "     def r1 = l[2][1]; setring r1; i; liph;";
   "// For the other rings type first (if R is the name of your base ring)";
    "     setring R;";
    "// and then continue as for r1.";
    "// ri/i are the charts of the normalizations and blowing ups of R/i";
 
  }
};

// ** loaded /usr/share/Singular/LIB/all.lib (13536,2010-10-18)
// ** redefining primdecZ **
// ** redefining primdecZ **
// ** redefining minAssZ **
// ** redefining minAssZ **
// ** redefining heightZ **
// ** redefining heightZ **
// ** redefining radicalZ **
// ** redefining radicalZ **
// ** redefining equidimZ **
// ** redefining equidimZ **
// ** redefining intersectZ **
// ** redefining intersectZ **
// ** redefining modp **
// ** redefining coefPrimeZ **
// ** redefining coefZ **
// ** redefining specialPowerZ **
// ** redefining separatorsZ **
// ** redefining extractZ **
// ** redefining normalizeZ **
// ** redefining satZ **
// ** redefining prepareQuotientring **
// ** redefining maxIndependSet **
// ** redefining quotientOneZ **
// ** redefining quotientZ **
// ** redefining reduceZ **
// ** redefining stdZ **
// ** redefining addIdealZ **
// ** redefining testPrimaryZ **
// ** loaded /usr/share/Singular/LIB/primdecint.lib (13403,2010-10-06)
. ;
> ring r=0,(x,y,z),dp;
> ideal i=x2+y3z3+y2z5;
> list li=lipmanresolve2(i);
// ** redefining S **
> li;
[1]:
   [1]:
      //   characteristic : 0
//   number of vars : 2
//        block   1 : ordering dp
//                  : names    y(2) y(3)
//        block   2 : ordering C
   [2]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x(2) y(1) y(3)
//        block   2 : ordering C
   [3]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x(3) y(1) y(2)
//        block   2 : ordering C
[2]:
   [1]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x y z
//        block   2 : ordering C
   [2]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    T(1) T(2) T(3)
//        block   2 : ordering C
   [3]:
      //   characteristic : 0
//   number of vars : 2
//        block   1 : ordering dp
//                  : names    y(2) y(3)
//        block   2 : ordering C
   [4]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x(2) y(1) y(3)
//        block   2 : ordering C
   [5]:
      //   characteristic : 0
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    x(3) y(1) y(2)
//        block   2 : ordering C
> exit;
Auf Wiedersehen.
